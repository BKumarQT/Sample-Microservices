name: Fetch Code from Private Repo

on:
  push:
    branches:
      - main

jobs:
  fetch-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: BKumarQT/Sample-Microservices
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
  
      - name: Install dependencies for Microservices
        run: |
              for microservice in lattice_north_to_qcl lattice_qcl_handler lattice_qcl_to_north lattice_qcl_to_south lattice_south_to_qcl
              do
                cd $microservice
                pip install -r requirements.txt
                cd ..
              done
  
      - name: Linting & Formatting
        run: |
          pip install black flake8
          black .
          flake8

  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        
        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
        #- uses: actions/setup-node@v3
        #  with:
        #    node-version: 16
        
        env:
        # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline

      - name: Snyk Code test
        run: |
          set -x  
          snyk code test --sarif > snyk-code.sarif || true
          
        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects
        
        # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
        # Use || true to not fail the pipeline.
      - name: Snyk IaC test and report
        run: snyk iac test --report # || true
        
                # Build the docker image for testing
              #- name: Build a Docker image
               # run: docker build -t your/image-to-test .
                # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
              #- name: Snyk Container monitor
              #  run: snyk container monitor your/image-to-test --file=Dockerfile
        
                # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif 